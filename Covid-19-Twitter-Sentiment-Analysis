# -*- coding: utf-8 -*-
#"""Sentiment Analysis.ipynb

#Automatically generated by Colaboratory.

#Original file is located at
    #https://colab.research.google.com/drive/1H_tiSQr-8W_gCoGzt3v1qBVIJeiWQZnl

#Asadi - Final project report - Programming for Digital Humanities - 4ME501


import tweepy as tw
import pandas as pd

from textblob import Word, TextBlob
import numpy as np
import matplotlib.pyplot as plt

# load the API credentials

from google.colab import files
uploaded = files.upload()

#read the Twitter API credentials

log = pd.read_csv('login.csv')

#Twitter API credentials

consumerKey = log['key'][0]
consumerSecret = log['key'][1]
accessToken = log['key'][2]
accessTokenSecret = log['key'][3]

#authentication object
authenticate = tw.OAuthHandler(consumerKey, consumerSecret)

# set access token and access secret
authenticate.set_access_token(accessToken, accessTokenSecret)

#creat the API object while passing the auth infor
api = tw.API(authenticate, wait_on_rate_limit = True)

#Querying Twitter
searchTerms = ('vaccines OR vaccine OR covid-19 vaccine OR coronavirus vaccine OR #coronavirusvaccine OR vaccination OR #covid19vaccine')
query = tw.Cursor(api.search, q=searchTerms, lang='en').items(2000)
tweets = [{'Tweets':tweet.text, 'Timestamp':tweet.created_at} for tweet in query]
print(tweets)

#assigning data to a Pandas dataframe
df = pd.DataFrame.from_dict(tweets)
df.head()

#defining references to search for them in each tweet and flag the tweet according to the mentioned reference 
pfizer_refs = ['Pfizer', 'BioNTech', 'Pfizer/BioNTech', 'pfizer', 'pfizers', 'Pfizer-BioNTech']
oxAz_refs = ['Oxford-AstraZeneca', 'Oxford/AstraZeneca', 'AstraZeneca', 'Astra Zeneca', 'Oxford/Astra-Zeneca']

def identify_subject(tweet, refs):
  flag = 0
  for ref in refs:
    if tweet.find(ref) !=-1:
      flag=1
  return flag

#flaging tweets to know if they mentioned one of the companies 
df['pfizer'] = df['Tweets'].apply(lambda x: identify_subject(x, pfizer_refs))
df['oxAz'] = df['Tweets'].apply(lambda x: identify_subject(x, oxAz_refs))

df[df['pfizer']==1]

import nltk
from nltk.corpus import stopwords
import re

#import stopwords corpus
nltk.download ('stopwords')
nltk.download('wordnet')
stop_words = stopwords.words('english')

#Cleaning the data
def preprocess_tweets(tweet, custom_stopwords):
  preprocessed_tweet = tweet
  preprocessed_tweet.replace('[^\w\s]', '')
  preprocessed_tweet = " ".join(word for word in preprocessed_tweet.split() if word not in stop_words)
  preprocessed_tweet = " ".join(Word(word).lemmatize() for word in preprocessed_tweet.split())
  preprocessed_tweet = re.sub(r'@[A-Za-z0-9_A-Za-z0-9]+', '', preprocessed_tweet) #removes @mentions
  preprocessed_tweet = re.sub(r'#', '', preprocessed_tweet) #removes hashtags
  preprocessed_tweet = re.sub(r'RT[\s]+', '', preprocessed_tweet) #removes retweets
  preprocessed_tweet = re.sub(r'http\S+', '', preprocessed_tweet) #removes hyperlink
  preprocessed_tweet = re.sub(r'\W+', ' ', preprocessed_tweet)
  return (preprocessed_tweet)



df['preprocessed Tweet'] = df['Tweets'].apply(lambda x: preprocess_tweets(x, custom_stopwords))

df.head()

#getting the sentiment analysis with textblob
df['polarity'] = df['preprocessed Tweet'].apply(lambda x: TextBlob(x).sentiment[0])
df['subjectivity'] = df['preprocessed Tweet'].apply(lambda x: TextBlob(x).sentiment[1])
df[['Tweets', 'pfizer', 'oxAz', 'polarity', 'subjectivity']].head()

#getting the aggregated values of subjectivity and polarity
display(df[df['pfizer']==1][['pfizer','polarity','subjectivity']].groupby('pfizer').agg([np.mean, np.max, np.minge]))
display(df[df['oxAz']==1][['oxAz','polarity','subjectivity']].groupby('oxAz').agg([np.mean, np.max, np.min]))

#getting the moving average polarity
pfizer = df[df['pfizer']==1][['Timestamp', 'polarity']]
pfizer = pfizer.sort_values(by='Timestamp', ascending=False)
pfizer['MA Polarity'] = pfizer.polarity.rolling(10, min_periods=1).mean()


oxAz = df[df['oxAz']==1][['Timestamp', 'polarity']]
oxAz = oxAz.sort_values(by='Timestamp', ascending=False)
oxAz['MA Polarity'] = oxAz.polarity.rolling(10, min_periods=1).mean()

pfizer.head()

fig, axes = plt.subplots(2, 1, figsize=(13, 10))
axes[0].plot(pfizer['Timestamp'], pfizer['MA Polarity'])
axes[0].set_title("\n".join(['Pfizer 10 Tweet Moving Average Polarity']))

axes[1].plot(oxAz['Timestamp'], oxAz['MA Polarity'], color='red')
axes[1].set_title("\n".join(["AstraZeneca 10 Tweet Moving Average Polarity"]))

fig.suptitle("\n".join(["Covid-19 Vaccine Analysis"]))

plt.show()

