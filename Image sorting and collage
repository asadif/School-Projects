from PIL import Image
import numpy as np
import glob
from math import ceil, floor

# #getting average value of red channel in images
def calcAvgR(img):
	width = img.size[0]
	height = img.size[1]
	red = []
	for y in range(0, height):
		for x in range (0, width):
			if img.mode == 'RGB':
				r, g, b = img.getpixel((x,y))
			else:
				r, g, b, a = img.getpixel((x,y))
			red.append(r)
	avgR = np.mean(red)
	return avgR

#to load images from folder and get 
#the average value of red channel for each image
def imageList(path):
	imageList = []
	png_images=glob.glob("*.png")
	for image in png_images:
		imageList.append(getImageV(image))

	jpg_images=glob.glob("*.jpg")
	for image in jpg_images:
		imageList.append(getImageV(image))

		# print(img.filename)
	return imageList

# the getImageV is a function defined to avoid repetition
#in the imageList function
def getImageV(image):
	av = []
	img = Image.open(image)
	av.append(img)
	av.append(calcAvgR(img))
	return av

##############################################

#Ceating 3 x 3 Collage:

def getSize(imageList):
	for image in imageList:
		img_width, img_height = image.size
	return img_width, img_height


def createCollage(imageList, frame_width, images_per_row):

	img_width, img_height = getSize(imageList)

	#scaling factor
	sf = (frame_width-(images_per_row-1))/(images_per_row*img_width)

	scaled_img_width = ceil(img_width*sf)
	scaled_img_height = ceil(img_height*sf)

	number_of_rows = ceil(len(imageList)/images_per_row)
	frame_height = ceil(sf*img_height*number_of_rows) 

	new_im = Image.new('RGB', (frame_width, frame_height))

	i,j=0,0
	for num, im in enumerate(imageList):
	    if num%images_per_row==0:
	        i=0
	    
	    #resizing opened image
	    im.thumbnail((scaled_img_width,scaled_img_height))
	    #Iterate through a 3 x 3 grid
	    y_cord = (j//images_per_row)*scaled_img_height
	    new_im.paste(im, (i,y_cord))
	    # print(i, y_cord)
	    i=(i+scaled_img_width)
	    j+=1

	# # new_im.show()
	new_im.save("collage.png", "PNG")

